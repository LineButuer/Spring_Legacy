웹(서버) 프로그래밍 개요

사용자가 웹 서비스를 사용하는 과정
브라우저 -(서비스요청)-> 웹서버(아파치 톰캣) -> 어플리케이션 서버 -> DB
										 서버 프로그램
DB ->  어플리케이션 서버 -> 웹서버 -(서비스응답)-> 브라우저(화면, html)

서버 프로그램은 사용자의 요청(request)에 따라 DB와 연동하여 다양한 작업을
처리하고 그 결과를 응답(response)하는 프로그램을 말한다.

JSP(Servlet), ASP, PHP 등으로 프로그램을 구현.

JSP(Java Server Page)
  웹 프로그램의 실행 환경에 따른 분류
  Client side : 요청을 처리하기 위한 프로그램 코드가 사용자의 브라우저에서
  				실행되는 방식.
  				전체 서비스 처리 속도는 빠르지만, 개개인의 컴퓨터에 따라
  				편차가 발생. 보안에 취약함.
  				PHP 방식.
  Server side : 요청을 처리하기 위한 프로그램 코드가 서버에서 실행되는 방식
  				전체 서비스 처리 속도는 느린편(상대적)이지만 개개인별 
  				편차가 없음. 보안에 우수함.
  				JSP, ASP 방식.

JSP = HTML + java
	페이지의 java 코드가 컴파일 되어 하나의 클래스로 변환되어 실행.
	jsp의 자바 코드가 컴파일 된 클래스를 서블릿(servlet) 클래스라고 함.
	
	jsp에서 프로그래밍 하는 방식
	1) html에 자바 코드를 추가(jsp)
	2) 순수한 자바 코드로 작성(servlet) -> EJB -> Spring framework

참고) URL Mapping 이란
	웹 서비스가 페이지 파일이 전달 되는 것이 아니라, html 코드가 전달되는
	방식이기 때문에, 프로그램으로 html 코드를 만들어서 브라우저로 전달하는
	것도 가능하다. 즉, 실제 html 파일 없어도 페이지 서비스를 제공할 수 
	있는데, URL주소에 파일이 아닌 html 코드만 요청하여 해당 내용을 처리하는
	프로그램 부분과 연결되도록 URL을 사용하는 것을 URL Mapping이라고 한다.  
	
웹 컨테이너(톰캣)
  서블릿 클래스로 만들어진 객체를 저장하는 공간. 서블릿 객체는 '이름'을 가지며
  사용자가 브라우저의 주소(URL)로 그 이름으로 요청하면 실행되는데, 주소(URL)과
  '이름'을 연결하는 것을 URL Mapping이라고 한다.
  톰캣(server)은 서블릿 객체를 저장하고 있다가 사용자가 URL로 요청하면
  해당 객체를 실행하는 역할을 담당한다.
  
  웹 서버란 24시간 365일 항시 대기하여 사용자의 요청을 받는 부분(아파치)과
  요청에 대한 처리(해당 객체 연결)를 하는 부분(톰캣)을 합쳐서 이르는 용어.  


JSP(Java Server Page)
  구성 요소
  - Directive : 지시자. <%@ 지시자 관련 문장들 %>
  - Script : Scriptlet(스크립틀릿) : 자바코드 작성영역. <% 문장 %>
  			Expression(표현식) : 출력용 <%=변수%>
  			Declaration(선언부) : 메소드 정의용 영역. <%! 메소드 %>
  - Expression Language(EL) : 표현 언어
  - 기본 객체(Implicit Object) : 내장 객체(생성없이 사용하는 객체)
  - 액션 태그(Action tag) : jsp용 태그(표준, 커스텀)
  - JSTL(표준 태그 라이브러리) : 자바 코드의 태그화 라이브러리
  

JSP 지시자(Directive)
  jsp 페이지에 대한 설정 정보를 지정할 때 사용
  <%@ 지시자명 속성1="값1" 속성2="값2".... %>
  
  지시자 종류
  1) page : 문서 타입(인코팅방식), 출력버퍼 크기, 에러페이지 관련 처리 등.
  2) taglib : 사용할 태그 라이브러리를 지정.
  3) include : 현재 페이지에 다른 페이지를 포함시킬 때 사용. 
  			<iframe>과 유사.
			
EL(Expression Language)
  표현식(expression)을 좀 더 편하게 써보자!
  표현식을 중심으로 코드를 기술하는 언어
  
  형식
    연산자와 피연산자 조합을 '${'와 '}'로 둘러싸서 표현.
    이름 하나로 구성된 식, 연산자를 포함하는 식, 자바의 정적 메소드를 호출하는 식 등
    
    ${cnt+1}			<%=cnt+1%>
     - El -				- jsp 표현식 -
     
    jsp 표현식의 cnt는 변수!
    EL의 cnt는 request의 속성!(표현식과 다르다!)


	기본 객체의 활용 범위
	page   < request  < session < application
    문서1장	 문서2장		한사용자 	  프로젝트1개(다수의 사용자)

    문서범위로 사용하는 기본 객체 : pageContext
    문서 2장 범위로 사용하는 기본 객체 : request(*)
    한 사용자의 접속 시작부터 접속 종료까지 : session(*)
    서버에서 동작하는 한 프로젝트의 시작과 끝까지 : application
    
    범위 처리를 위한 기본 객체(위의 객체들)는 모두 Attribute 영역이 존재
    Attribute : 전달할 데이터를 저장하는데 사용하는 공간 
    
	form 태그로 전달하는 데이터는 parameter로 전달됨.
	
	Attribute 처리용 주요 메소드
	1) setAttribute : 값을 저장하는데 사용.
	2) getAttribute : 값을 추출하는데 사용.
	3) removeAttribute : 저장된 값을 제거하는데 사용.
	
	한 페이지에서 다른 페이지로 이동하는 또다른 방법
	forward : url을 바꾸지 않으면서 페이지를 변경하는 방법
			  Attribute에 데이터를 담아서 페이지를 변경하는 방법.

  form 태그로 전달하는 parameter 데이터 추출하기
	${param.name}
	name : input 태그의 name 속성에 지정한 값.

   
EL의 특별한 연산자 : empty
   존재 여부를 확인하는 단항 연산자
   예) ${empty name} : name에 값이 없으면 true, 있으면 false.


Jsp 표준 태그 라이브러리(JSTL)

taglib 지시자를 활용하자

JSTL(Jsp Standard Tag Library)로 할 수 있는 일
 - 간단한 프로그램 로직을 활용(변수, 조건문, 반복문 등)
 - 다른 url 호출(<c:redirect>, <c:import> 등)
 - 날짜, 시간, 숫자 포맷 처리
 - 기타
 
  구성 라이브러리
  1) core(*) : 변수, 제어문 등 
  2) format(*) : 출력 형식, 지역에 따른 날짜/시간 형식, 숫자 형식 등
  3) xml : XML 처리 관련 내용 (-> xml보다 JSON을 많이 활용)
  4) sql : DB SQL 관련 내용
  5) functions : 콜렉션(배열 구조체 등), String 처리 관련

사용법
  taglib 지시가를 활용하여 라이브러리의 URI 식별자와 접두어를 연결하여
  사용.
  <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
  
  위 문장을 jsp 상단에 추가
  라이브러리별 prefix와 uri
  core : "c", "http://java.sun.com/jsp/jstl/core"
  format : "fmt", "http://java.sun.com/jsp/jstl/fmt"
  xml : "x", "http://java.sun.com/jsp/jstl/xml"
  sql : "sql", "http://java.sun.com/jsp/jstl/sql"
  function : "fn", "http://java.sun.com/jsp/jstl/functions"

  <c:set var="num1" value="10>
  -> 이름이 num1인 변수를 생성하여 10을 대입.

Core 라이브러리
  변수 관련 (기본 객체의 attribute에 생성되는 공간)
  	<c:set> 선언
  	<c:remove> 삭제
  	
  	주요 속성
  	  - var : 변수 이름 지정 속성
  	  - value : 입력값 지정 속성
  	  - scope : 기본 객체의 attribute로 설정
  	     예) scope="session" -> session.setAttribute()
  	     속성값 : page, request, sesstion, application
  		scope를 지정하지 않으면 사용 범위는 page.
  	jstl 변수는 EL로 읽어올 수 있다.

  제어문
    <c:if> : 자바의 if문과 같으나 else가 없음.(else if 도 없음)
    주요 속성
      - test : 조건식을 작성하는 속성
      
    <c:choose> : 자바의 switch와 비슷한 태그.(컨테이너)
    	<c:when> : case와 비슷한 태그. test 속성으로 구분.
    	<c:otherwise> : dafault와 비슷한 태그.
	
	<c:forEach> : 자바의 for문과 비슷한 태그.
	주요 속성
	  - var : 카운터 변수를 생성하는 속성
	  - begin : 카운터 변수 초기값 입력 속성
	  - end : 반복 횟수의 한계(상한)값 입력 속성
	  - step : 카운터 변수 증가 간격 설정 속성
	  - items : 배열 형태의 데이터를 입력하는 속성

format 라이브러리
  날짜와 시간을 출력하는 형식 지정 : <fmt:formatDate>  
    주요 속성
      - value : 날짜 데이터(Date 객체)
      - type : 날짜와 시간 구분(date - 날짜, time - 시간, both - 둘다)
      - dateStyle : 날짜 출력 형식 지정
      		full, long, medium, short
      - timeStyle : 시간 출력 형식 지정
      		full, long, medium, short
	  - pattern : 출력 형식을 개발자 임의로 변경하는 속성

  숫자 출력 형식 지정 : <fmt:formatNumber>
  	  - value : 숫자문자열 데이터
  	  - pattern : 출력 형식을 임의로 지정(변경)
  	  - groupingUsed : 세자리마다 ',' 출력
  	  - type : percent, currency(회계)
  	  - currencySymbol : 통화 기호 출력 지정

표준 태그 라이브러리
  <jsp:include> : 한 페이지에 다른 페이지를 포함.
  		page 속성 - 포함시킬 페이지를 작성
  <jsp:forward> : pageContext의 forward와 같은 기능을 수행.
  		page 속성 - 이동할 페이지를 작성
  		기본 객체의 attribute에 데이터를 저장하여 전달할 때 사용.

